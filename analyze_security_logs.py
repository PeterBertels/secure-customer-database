"""
Security Log Analysis Script

This script parses the 'security.log' file generated by the Secure Customer Database System
and creates a bar chart visualizing the frequency of key security events (e.g., successful logins,
failed 2FA attempts). The chart is saved as 'security_events.png' for inclusion in the project demo.

Dependencies:
- matplotlib: For creating the bar chart.
- collections.Counter: For counting event occurrences.
- re: For pattern matching in log entries.
"""

import matplotlib.pyplot as plt
from collections import Counter
import re

# Define event types to track in security.log with corresponding regex patterns
EVENT_TYPES = {
    'Successful login': r'Successful login for email',
    'Failed 2FA': r'Failed 2FA attempt for',
    'Rate limit exceeded': r'Rate limit exceeded for email',
    'Invalid email': r'Invalid email attempt',
    'User deleted': r'User deleted'
}

# Parse the security.log file and count occurrences of each event type
event_counts = Counter()
with open('security.log', 'r') as f:
    for line in f:
        for event_name, pattern in EVENT_TYPES.items():
            if re.search(pattern, line):
                event_counts[event_name] += 1

# Create a bar chart to visualize the event counts
events = list(event_counts.keys())
counts = list(event_counts.values())

# Set up the plot with a specified figure size
plt.figure(figsize=(10, 6))
plt.bar(events, counts, color='skyblue')
plt.xlabel('Event Type')
plt.ylabel('Number of Events')
plt.title('Security Events in Secure Customer Database System')
# Rotate x-axis labels for better readability
plt.xticks(rotation=45, ha='right')
plt.tight_layout()

# Save the plot as a PNG file
plt.savefig('security_events.png')
plt.close()

print("Security events graph saved as 'security_events.png'")